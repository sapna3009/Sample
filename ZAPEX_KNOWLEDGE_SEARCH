public class ZAPEX_KNOWLEDGE_SEARCH {
    @InvocableMethod(
    // Matches the API Name of the flex template: Can be executed by prompt builder
    //CapabilityType='FlexTemplate://PT_Knowledge_Articles'
    )
    public static List<Response> searchforContext(List<Request> requests) {
        List<Response> responses = new List<Response>();
        Response response = new Response();
        
        /* Variable declaration - start  */
        
        String DC_Region = requests[0].DC_Region;     // Prompt Input for DC_Region
        String User_Input = requests[0].User_Input;   // Prompt Input for User_Input
        String DC_Affiliation = requests[0].DC_Affiliation;// Prompt Input for DC_Affiliation
        String DC_Persona = requests[0].DC_Persona;// Prompt Input for DC_Persona
        String DC_Keyword = requests[0].DC_Keyword;// Prompt Input for DC_Keyword
        String DC_Service;
        String DC_Platform;
        string WHERE_Y_N; //To find if a where clause is needed or not
        String percent = '%'; //Used to create cdp query
        string quote = '\'';  //Used to create cdp query
        string d_quote = '"';  //Used to create cdp query
        /* Variable declaration - end  */
        
        
        
        
        /*Logic to populate Platform and Service from DC_Keyword- start
        Technical Need: Prompt builder supports only 5 inputs when using Flex type. As we have reached the limit, service and platform
            are concatenated(separated by &%) and populated in DC_Keyword via a flow
            Pseudo Logic:   If DC_Keyword is blank, then populate DC_Platform & DC_Service as blank else
            Split them by '&%'
            In case of two splits, both Platform and Service are populated, assign them in DC_Platform and DC_Service
            In case of one split, then populate corresponding platform or service
            In cas of no split, populate as blank(which will lead to no where clause in cdp query)
             */
        if (DC_Keyword <> 'ZZZ'  && DC_Keyword.length() <>2)
        {
            List<String> splitValues = DC_Keyword.split('&%');
            // Check if the split was successful and store in variables
            system.debug(splitValues.size());
            
            //  DC_Platform = splitValues[0];
            //  DC_Service = splitValues[1];
            
            if ( DC_Keyword.substring(0,2) <> '&%' && DC_Keyword.substring(DC_Keyword.length() - 2) <> '&%')
            {
                DC_Platform = splitValues[0];
                DC_Service = splitValues[1];
            }
            else if ( DC_Keyword.substring(0,2) == '&%')
            {
                DC_Service = splitValues[1];
                DC_Platform ='ZZZ';
            }
            else if (DC_Keyword.substring(DC_Keyword.length() - 2) == '&%') {
                DC_Platform = splitValues[0];
                DC_Service = 'ZZZ';
            }
            
        }
        else
        {
            DC_Platform ='ZZZ';
            DC_Service ='ZZZ';
        }
        
        /* Logic to populate Platform and Service from DC_Keyword- end */
        
        
        
        
        
        /* Logic to manipulate standard filtering between Case-contact values to Knowledge Data Categories-start
        Technical Need: There are not data category for affiliatin for contact affiliatin values Gale Admin, Gale Patron and Internal,
                        due to this the articles will be filtered out
        Pseudo Logic:   If DC_Affiliation is Gale Admin or Gale Patron or Internal, then make DC_Affiliatin as blank,
                        i.e. no filtering by affiliation column Caribbean & Puerto Rico
                        In case the DC_Affiliation is Kindergarten through Grade 12 (K-12/P-12) then change it to Secondary (K12) &
                        Language School to Private Language School respectively. This is done due to different values for affiliation for contact and data category
            Similatly no filtering by region if region is       */
            if (
            DC_Affiliation == 'Gale Admin' || // Delete when Gale Admin goes live with Knowledge Data Category Mapping - Check with Samuel White
            DC_Affiliation == 'Gale Patron' ||// Delete when Gale Patron goes live with Knowledge Data Category Mapping - Check with Samuel White
            DC_Affiliation == 'Internal' )
        {
            DC_Affiliation = 'ZZZ';
        }
        else if (DC_Affiliation == 'Kindergarten through Grade 12 (K-12/P-12)')
        {
            DC_Affiliation = 'Secondary (K12)';
        }
        else if (DC_Affiliation == 'Language School')
        {
            DC_Affiliation = 'Private Language School';
        }

        IF (DC_Region=='Caribbean & Puerto Rico')
        {
            DC_Region = 'ZZZ';
        }
        
        /* Logic to manipulate standard filtering between Case-contact values to Knowledge Data Categories-end */
        
        if (DC_Platform.length() > 40) {
            DC_Platform = DC_Platform.substring(0, 40);
        }
        if (DC_Service.length() > 40) {
            DC_Service = DC_Service.substring(0, 40);
        }


        
        /* Logic to figure out if cdp query will have a where clause-start */
        if (DC_Affiliation =='ZZZ' && DC_Persona =='ZZZ'  && DC_Region =='ZZZ' && DC_Platform =='ZZZ' && DC_Service =='ZZZ')
        {
            WHERE_Y_N = 'N';
        }
        ELSE
        {
            WHERE_Y_N = 'Y';
        }
        /* Logic to figure out if cdp query will have a where clause-end */
        
        
        
        User_Input = User_Input.replaceAll('\'', ''); // Remove any single quote in User input, as they case error in cdp execution
        
        /* CDP Query Creation-start */
        
        ConnectApi.CdpQueryInput input = new ConnectApi.CdpQueryInput(); // Input cdp query declaration
        
        input.sql ='select c.Chunk__c Info,c.SourceRecordid__C ID,v.score__c score,u.RecordURL_c__c URL_LINK FROM ';
        input.sql = input.sql + 'vector_search(table(SI_Knowledge_kav_ACAD_index__dlm),  \'' + String.escapeSingleQuotes(User_Input) + '\', \'\'     ,';
        if ( WHERE_Y_N == 'Y')
        {
            input.sql = input.sql +  '30) ';//In case of a filter 30 chunks are outputed
        }
        else
        {
            input.sql = input.sql +  '20) ';//In case of no filter 20 chunks are outputed
        }
        input.sql = input.sql + 'v JOIN SI_Knowledge_kav_ACAD_chunk__dlm c ON v.RecordId__c = c.RecordId__c join DMO_Knowledge_kav_ACAD__dlm u ';
        input.sql = input.sql + 'on c.SourceRecordID__c = u.Id__c ';
        
        
        IF (WHERE_Y_N == 'Y')//Join conditin with Data Category DMO in case of where clause
        {
            input.sql = input.sql + 'join DMO_Data_Category__dlm  DC ON  DC.Knowledge_Article_ID__c = c.SourceRecordid__C ';
            input.sql = input.sql + ' WHERE ';
        }
        if (DC_Region <> 'ZZZ') // Add region filter in case region filter is not blank
        {
            input.sql = input.sql +  ' DC.Data_Category__c Like '+ quote + percent+d_quote+'RGN_'+ DC_Region+d_quote +percent +quote;
        }
        if (DC_Persona <> 'ZZZ')  // Add persona filter in case persona filter is not blank
        {
            if (DC_Region <> 'ZZZ') //To add and in case filter is not the first filter applied
            {
                input.sql = input.sql +' AND ';
            }
            
            input.sql = input.sql +  ' DC.Data_Category__c Like '+ quote + percent+d_quote+'PRS_'+ DC_Persona+d_quote+percent  +quote;
        }
        if (DC_Affiliation <> 'ZZZ')   // Add Affiliation filter in case region filter is not blank
        {
            if (DC_PERSONA <> 'ZZZ')//To add and in case filter is not the first filter applied
            {
                input.sql = input.sql +' AND ';
            }
            input.sql = input.sql +  'DC.Data_Category__c Like '+ quote + percent+d_quote+'AFL_'+ DC_Affiliation+d_quote+percent  +quote;
        }
        if (DC_Platform <> 'ZZZ')  // Add platform filter in case region filter is not blank
        {
            if (DC_AFFILIATION <> 'ZZZ')//To add and in case filter is not the first filter applied
            {
                input.sql = input.sql +' AND ';
            }
            input.sql = input.sql +  'DC.Data_Category__c Like '+ quote + percent+d_quote+'PLF_'+ DC_Platform+d_quote+percent  +quote;
        }
        if (DC_Service <> 'ZZZ')   // Add Service filter in case region filter is not blank
        {
            if (DC_Platform <> 'ZZZ' || DC_Affiliation <> 'ZZZ')//To add and in case filter is not the first filter applied
            {
                input.sql = input.sql +' AND ';
            }
            input.sql = input.sql +  'DC.Data_Category__c Like '+ quote + percent+d_quote+'SRV_'+ DC_Service+d_quote+percent  +quote;
        }
        
        
        input.sql = input.sql + 'ORDER by score__c desc LIMIT ';
        if ( WHERE_Y_N == 'Y')
        {
            input.sql = input.sql +  '30';//In case of a filter 30 chunks are outputed
        }
        else
        {
            input.sql = input.sql +  '20';//In case of noa filter 20 chunks are outputed
        }
        /* CDP Query Creation-end */
        
        
        System.debug(input);
        
        
        
        
        ConnectApi.CdpQueryOutput output;
        if(!Test.isRunningTest()){
            output = ConnectApi.CdpQuery.queryANSISql(input);
        }
        List<Object> data = output != null ? output.data: new List<Object>();
        String scs = '';
        Integer counter = 0; // Initialize a counter to track iterations
        for (Object searchRecord : data) {
            if (counter >= 20)// This is to make sure in case of filter, output is maximum of 20 values
            {
                break; // Exit the loop after 20 iterations
            }
            Map<String, Object> myMap = (Map<String, Object>) JSON.deserializeUntyped(JSON.serialize(searchRecord));
            Map<String, String> sc = new Map<String, String>();
            sc.put('Info', String.valueOf(myMap.get('Info')));
            sc.put('URL_LINK', String.valueOf(myMap.get('URL_LINK')));
            scs = scs + JSON.serialize(sc);
            counter++; // Increment the counter
        }
        response.Prompt = scs;
        responses.add(response);
        return responses;
    }
    
    public static boolean getUserRecordAccess(String recordId) {
        return true;
    }
    
    // SearchString is a Prompt Template Input String
    public class Request {
        @InvocableVariable
        public String User_Input;
        @InvocableVariable
        public string DC_Region;
        @InvocableVariable
        public string DC_Persona;
        @InvocableVariable
        public string DC_Affiliation;
        @InvocableVariable
        public string DC_Keyword;
    }
    
    public class Response {
        @InvocableVariable
        public String Prompt;
    }
    
}
